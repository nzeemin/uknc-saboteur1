	.TITLE	S1CORE
	.ASECT

; Special comments-warnings in the code:
; !!MUT-CMD!! - the command mutable, means other code changes it
; !!MUT-ARG!! - the command argument is mutable

;------------------------------------------------------------------------------

.MACRO	PUSH	RR
	MOV	RR, -(SP)
.ENDM
.MACRO	POP	RR
	MOV	(SP)+, RR
.ENDM

;------------------------------------------------------------------------------

SCREEN = 100000		; Начало экрана, косвенный адрес для УКНЦ

;------------------------------------------------------------------------------

	.=001000
STCORE::
K01000:
	CLR	@#177560
	MTPS	#000340			; Disable interrupts
	MOV	SP, OSTACK		; Сохраняем начальное значение SP
	MOV	#1000, SP
	CALL	STPAL			; Установить игровую палитру
	MOV	#GAMESC, R1		; Строка для подготовки игрового экрана
	CALL	PRINT
	CALL	PAUSE			; подождём пока очистится экран
K01220:	JMP	START
;
OSTACK:	.WORD	01000			; Сохраняем начальное значение SP
;
FNCORE:
	MOV	OSTACK, SP
	MOV	#EXITSC, R1		; Строка очистки экрана перед выходом
	CALL	PRINT
	EMT	350			; .EXIT
;
;------------------------------------------------------------------------------

; Подпрограмма: Печать строки: R1 = адрес строки, строка завершается 0; портит R0
PRINT:
10$:	MOVB	(R1)+, R0	; Конец строки?
	BEQ	RETN		; да => выходим
20$:	TSTB	@#177564	; Источник канала 0 готов?
	BPL	20$		; нет => ждём
	MOV	R0, @#177566	; передаём символ в канал 0
	BR	10$

;Подпрограмма: пауза после очистки экрана чтобы ПП закончил работу
PAUSE:	; Pause to let PPU finish the previous commands
	MOV	#177777, R5
1$:	NOP
	SOB	R5, 1$
RETN:	RETURN

GAMESC:	; Строка подготовки игрового экрана
;	.BYTE	33,246,061	; Формат экрана 80x24 ;DEBUG
	.BYTE	33,246,62	; Формат экрана 40x24
	.BYTE	33,240,63	; Цвет символа
	.BYTE	33,241,60	; Цвет знакоместа 0
	.BYTE	33,242,60	; Цвет фона 0
	.BYTE	14		; Clear screen
	.BYTE	33,247,60	; Цвет курсора
	.BYTE	0
EXITSC:	; Строка очистки экрана перед выходом
	.BYTE	33,246,061	; Формат экрана 80x24
	.BYTE	33,240,67	; Цвет символа
	.BYTE	33,241,61	; Цвет знакоместа 1
	.BYTE	33,242,61	; Цвет фона 1
	.BYTE	33,247,67	; Цвет курсора
	.BYTE	14		; Очистить экран
	.BYTE	0

	.EVEN

;------------------------------------------------------------------------------

PALNO:	.WORD	0		; Номер текущей палитры
; Палитра для установки в памяти ПП
;		 |____....____....|
PALETD:	.WORD	^B1011101010011000	; Палитра УКНЦ по умолчанию
	.WORD	^B1111111011011100	;
PALETT:	.WORD	^B1011111110010000	; Игровая палитра 0
	.WORD	^B1111110011011110	;   белый на чёрном
	.WORD	^B1011110010011000	; Игровая палитра 1
	.WORD	^B1111111111011110	;   зелёный на чёрном
	.WORD	^B1011111110011001	; Игровая палитра 2
	.WORD	^B1111111111011100	;   чёрный на синем
	.WORD	^B0100000001101111	; Игровая палитра 3
	.WORD	^B0000001100100001	;   чёрный на белом

; Массив параметров для обмена с ПП по каналу 2
PPBLCK:	.BYTE	0		; В этом байте будет содержаться код ошибки или 0
PPBCMD:	.BYTE	20		; Команда (01-ВЫДЕЛИТЬ ПАМЯТЬ, 02-ОСВОБОДИТЬ ПАМЯТЬ 10-ЧТЕНИЕ, 20-ЗАПИСЬ, 30-ПУСК)
	.WORD	32		; Устройство - периферийный процессор
PPBAPP:	.WORD	002470		; Адрес ОЗУ ПП - два слова палитры
PPBACP:	.WORD	PALETT		; Адрес ОЗУ ЦП - адрес новой палитры
	.WORD	2		; Длина блока в словах
PPBADR:	.WORD	PPBLCK		; Слово всегда содержит начальный адрес массива параметров
	.WORD	401		; Стоповый элемент (используется при передаче)

; Вернуть стандартную палитру
STPALD:
	MOV	#PALETD, R0
	BR	STPAL1
; Установить текущую палитру
STPAL:
	MOV	@#PALNO, R0
	BIC	#177774, R0	; 0..3
	ASL	R0
	ASL	R0		; x4
	ADD	#PALETT, R0
STPAL1:	MOV	R0, @#PPBACP
;	BR	PPSEND
; Подпрограмма передачи по каналу К2 массива параметров в ПП
PPSEND:	MOV	#PPBADR, R0
	MOV	#5, R1
	MTPS	#200
	BR	1$
2$:	MOVB	(R0)+, @#176676
1$:	TSTB	@#176674
	BPL	1$
	SOB	R1, 2$
	MTPS	#0
	RETURN

	.BLKW	63	;NOTE: Свободное место

;------------------------------------------------------------------------------
;
START:
	RETURN ;STUB

;------------------------------------------------------------------------------

.INCLUDE /S1ROOM.MAC/

.INCLUDE /S1FONT.MAC/

;------------------------------------------------------------------------------

L7918:	; Room procedure (for 19 rooms with a guard)
	JMP	LB44C
L791B:	; Rooms 7C9C/92EF initialization
	JMP	LB425
LA0DF:
	;TODO
LA0E8:
	;TODO
LA0ED:
	;TODO
LA0F2:
	;TODO
LA0F7:
	;TODO
LA0FC:
	;TODO
LA101:
	;TODO
LA106:
	;TODO
LA10B:
	;TODO
LA110:
	;TODO
LA115:
	;TODO
LA11A:
	;TODO
LA11F:
	;TODO
LA124:
	;TODO
LA129:
	;TODO
LA12E:
	;TODO
LA133:
	;TODO
LA138:
	;TODO
LA142:
	;TODO
LA14A:
	;TODO
LA14F:
	;TODO
LA154:
	;TODO
LA15F:
	;TODO
LA16A:
	;TODO
LA16F:
	;TODO
LA174:
	;TODO
LA179:
	;TODO
LA183:
	;TODO
LA188:
	;TODO
LA192:
	;TODO
LA197:
	;TODO
LA19C:
	;TODO
LA1A1:
	;TODO
LA1A6:
	;TODO
LA1B5:
	;TODO
LA1C0:
	;TODO
LA1CB:
	;TODO
LA1D6:
	;TODO
LA353:
	;TODO
LA35C:
	;TODO
LA361:
	;TODO
LA366:
	;TODO
LA36B:
	;TODO
LA370:
	;TODO
LA375:
	;TODO
LA37A:
	;TODO
LA37F:
	;TODO
LA384:
	;TODO
LA389:
	;TODO
LA38E:
	;TODO
LB368:
	;TODO
LB41F:
	;TODO
LB422:
	;TODO
LB425:
	;TODO
LB42E:
	;TODO
LB446:
	;TODO
LB44C:
	;TODO
LB452:
	;TODO
LB458:
	;TODO
LB47A:
	;TODO
LB483:
	;TODO
LC64C:
	;TODO
LC671:
	;TODO
LC681:
	;TODO
LC6A5:
	;TODO
LF973:
	;TODO

;------------------------------------------------------------------------------
	.END	STCORE
