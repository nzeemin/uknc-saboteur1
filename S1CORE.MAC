	.TITLE	S1CORE
	.ASECT

; Special comments-warnings in the code:
; !!MUT-CMD!! - the command mutable, means other code changes it
; !!MUT-ARG!! - the command argument is mutable

;------------------------------------------------------------------------------

.MACRO	PUSH	RR
	MOV	RR, -(SP)
.ENDM
.MACRO	POP	RR
	MOV	(SP)+, RR
.ENDM

;------------------------------------------------------------------------------

SCREEN = 100000		; Начало экрана, косвенный адрес для УКНЦ

;------------------------------------------------------------------------------

	.=001000
STCORE::
K01000:
	CLR	@#177560
	MTPS	#000340			; Disable interrupts
	MOV	SP, OSTACK		; Сохраняем начальное значение SP
	MOV	#1000, SP
;	CALL	STPAL			; Установить игровую палитру
	MOV	#GAMESC, R1		; Строка для подготовки игрового экрана
	CALL	PRINT
	CALL	PAUSE			; подождём пока очистится экран
K01220:	JMP	START
;
OSTACK:	.WORD	01000			; Сохраняем начальное значение SP
;
FNCORE:
	MOV	OSTACK, SP
	MOV	#EXITSC, R1		; Строка очистки экрана перед выходом
	CALL	PRINT
	EMT	350			; .EXIT
;
;------------------------------------------------------------------------------

; Подпрограмма: Печать строки: R1 = адрес строки, строка завершается 0; портит R0
PRINT:
10$:	MOVB	(R1)+, R0	; Конец строки?
	BEQ	RETN		; да => выходим
20$:	TSTB	@#177564	; Источник канала 0 готов?
	BPL	20$		; нет => ждём
	MOV	R0, @#177566	; передаём символ в канал 0
	BR	10$

;Подпрограмма: пауза после очистки экрана чтобы ПП закончил работу
PAUSE:	; Pause to let PPU finish the previous commands
	MOV	#177777, R5
1$:	NOP
	SOB	R5, 1$
RETN:	RETURN

GAMESC:	; Строка подготовки игрового экрана
;	.BYTE	33,246,061	; Формат экрана 80x24 ;DEBUG
	.BYTE	33,246,62	; Формат экрана 40x24
	.BYTE	33,240,63	; Цвет символа
	.BYTE	33,241,60	; Цвет знакоместа 0
	.BYTE	33,242,60	; Цвет фона 0
	.BYTE	14		; Clear screen
	.BYTE	33,247,60	; Цвет курсора
	.BYTE	0
EXITSC:	; Строка очистки экрана перед выходом
	.BYTE	33,246,061	; Формат экрана 80x24
	.BYTE	33,240,67	; Цвет символа
	.BYTE	33,241,61	; Цвет знакоместа 1
	.BYTE	33,242,61	; Цвет фона 1
	.BYTE	33,247,67	; Цвет курсора
	.BYTE	14		; Очистить экран
	.BYTE	0

	.EVEN

;------------------------------------------------------------------------------

PALNO:	.WORD	0		; Номер текущей палитры
; Палитра для установки в памяти ПП
;		 |____....____....|
PALETD:	.WORD	^B1011101010011000	; Палитра УКНЦ по умолчанию
	.WORD	^B1111111011011100	;
PALETT:	.WORD	^B1011111110010000	; Игровая палитра 0
	.WORD	^B1111110011011110	;   белый на чёрном
	.WORD	^B1011110010011000	; Игровая палитра 1
	.WORD	^B1111111111011110	;   зелёный на чёрном
	.WORD	^B1011111110011001	; Игровая палитра 2
	.WORD	^B1111111111011100	;   чёрный на синем
	.WORD	^B0100000001101111	; Игровая палитра 3
	.WORD	^B0000001100100001	;   чёрный на белом

; Массив параметров для обмена с ПП по каналу 2
PPBLCK:	.BYTE	0		; В этом байте будет содержаться код ошибки или 0
PPBCMD:	.BYTE	20		; Команда (01-ВЫДЕЛИТЬ ПАМЯТЬ, 02-ОСВОБОДИТЬ ПАМЯТЬ 10-ЧТЕНИЕ, 20-ЗАПИСЬ, 30-ПУСК)
	.WORD	32		; Устройство - периферийный процессор
PPBAPP:	.WORD	002470		; Адрес ОЗУ ПП - два слова палитры
PPBACP:	.WORD	PALETT		; Адрес ОЗУ ЦП - адрес новой палитры
	.WORD	2		; Длина блока в словах
PPBADR:	.WORD	PPBLCK		; Слово всегда содержит начальный адрес массива параметров
	.WORD	401		; Стоповый элемент (используется при передаче)

; Вернуть стандартную палитру
STPALD:
	MOV	#PALETD, R0
	BR	STPAL1
; Установить текущую палитру
STPAL:
	MOV	@#PALNO, R0
	BIC	#177774, R0	; 0..3
	ASL	R0
	ASL	R0		; x4
	ADD	#PALETT, R0
STPAL1:	MOV	R0, @#PPBACP
;	BR	PPSEND
; Подпрограмма передачи по каналу К2 массива параметров в ПП
PPSEND:	MOV	#PPBADR, R0
	MOV	#5, R1
	MTPS	#200
	BR	1$
2$:	MOVB	(R0)+, @#176676
1$:	TSTB	@#176674
	BPL	1$
	SOB	R1, 2$
	MTPS	#0
	RETURN

	.BLKW	63	;NOTE: Свободное место

;------------------------------------------------------------------------------
;
START:

	CALL	LACCA			; Frames/indicators

;	MOV	#16., R1
;	MOV	#LDF27, R3
;	MOV	#<SCREEN>, R2
;	CALL	LAED1			; Print string "S START MISSION"

100$:	BR	100$	;DEADLOOP

	RETURN ;STUB

;------------------------------------------------------------------------------

.INCLUDE /S1ROOM.MAC/

.INCLUDE /S1FONT.MAC/

;------------------------------------------------------------------------------

L7184:	.WORD	LB513	; Current Room address
L7186:	.WORD	LA0B5	; Ninja sprite address

L71C3:	.WORD	257.	; Current Guard position in tilemap
L71C5:	.BYTE	17.	; Current Guard X position
L71C6:	.BYTE	8.	; Current Guard Y position

L71CB:	.WORD	398.	; Dog position in tilemap
L71CD:	.BYTE	0	; Dog direction
L71CE:	.BYTE	8.	; Dog X position
L71CF:	.BYTE	0	; Dog ??
L71D0:	.BYTE	7	; Dog's left limit
L71D1:	.BYTE	23.	; Dog's right limit
L71D2:	.BYTE	0	; Dog ??
L71D3:	.BYTE	6	; Dog Y position
	.EVEN

L71D4:	.BYTE
L71D5:	.BYTE	1
L71D6:	;TODO		; Room 79C6 dog data

L7232:	.BYTE	0	; Input bits: 000FUDLR

L7343:	.BYTE	7	; Counter used in movement handlers
L7344:	.BYTE	0	; Dog's flag: 1 = ignore left/right limit
L7345:	.BYTE	20.	; Dog ??
L7346:	.BYTE	10.	; Guard walking phase $00..$03 or other state: $09 = Guard dead; ...
L7347:	.BYTE	1	; Guard direction

;
; Room token #0E: Put one tile at the given address; params: 3 bytes (tile, offset)
L734D:	POP	R3			; Restore token sequence address
	INC	R3			; Skip token byte
	MOVB	(R3)+, R0		; get tile byte
	CLR	R2
	BISB	(R3)+, R2		; get offset low byte
	SWAB	R2
	BISB	(R3), R2		; get offset high byte
	SWAB	R2
	ADD	#L6590, R2		; + Tile screen 0 address
	PUSH	R3
	MOVB	R0, (R2)		; put tile into tilemap
	BR	L734A			; => B702 Proceed to the next room token
; Room token #0D: Set border color; params: 1 byte
L7359:	HALT	; DO NOTHING, we're not processing this token
; Room token #01: Fill to down; params: 4 bytes (count, filler, offset)
L7381:	MOV	#30., R4		; shift = 30.
L7384:	POP	R3			; Restore token sequence address
	INC	R3			; Skip token byte
	MOVB	(R3)+, R1		; get count byte
	MOVB	(R3)+, R0		; get tile byte
	CLR	R2
	BISB	(R3)+, R2		; get offset low byte
	SWAB	R2
	BISB	(R3), R2		; get offset high byte
	SWAB	R2
	ADD	#L6590, R2		; + Tile screen 0 address
	PUSH	R3
10$:	MOVB	R0, (R2)		; put tile into tilemap
	ADD	R4, R2			; apply the shift
	SOB	R1, 10$
L734A:	JMP	LB702			; => Proceed to the next room token
; Room token #0A: Fill to down-right; params: 4 bytes (count, filler, offset)
L7395:	MOV	#31., R4		; shift = 30. + 1
	BR	L7384
; Room token #0B: Fill to down-left; params: 4 bytes (count, filler, offset)
L739A:	MOV	#29., R4		; shift = 30. - 1
	BR	L7384
; Room token #02: Fill to right; params: 4 bytes (count, filler, offset)
L739F:	MOV	#1, R4			; shift = 1
	BR	L7384
; Room token #06: Fill triangle from wide top; params: 4 bytes (filler, count, offset)
L73A4:	MOV	#1, R4			; shift = 1
L73A6:	POP	R3			; Restore token sequence address
	INC	R3			; Skip token byte
	MOVB	(R3)+, R0		; get tile byte
	CLR	R1
	BISB	(R3)+, R1		; get count byte
	CLR	R2
	BISB	(R3)+, R2		; get offset low byte
	SWAB	R2
	BISB	(R3), R2		; get offset high byte
	SWAB	R2
	ADD	#L6590, R2		; + Tile screen 0 address
	PUSH	R3
L73B8:	PUSH	R2
	MOV	R1, R3
L73BA:	MOVB	R0, (R2)		; put tile into tilemap
	ADD	R4, R2			; apply the shift
	SOB	R3, L73BA
	POP	R2
	ADD	#30., R2		; next row
	SOB	R1, L73B8		; continue loop by rows
	BR	L734A			; => B702 Proceed to the next room token
; Room token #07: Fill triangle from wide bottom; params: 4 bytes (filler, count, offset)
L73C5:	MOV	#1, R4			; shift = 1
L73C7:	POP	R3			; Restore token sequence address
	INC	R3			; Skip token byte
	MOVB	(R3)+, R0		; get tile byte
	MOVB	(R3)+, R1		; get count byte
	CLR	R2
	BISB	(R3)+, R2		; get offset low byte
	SWAB	R2
	BISB	(R3), R2		; get offset high byte
	SWAB	R2
	ADD	#L6590, R2		; + Tile screen 0 address
	PUSH	R3
	MOV	#1, R3
L73DB:	PUSH	R2
L73DD:	MOVB	R0, (R2)		; put tile into tilemap
	ADD	R4, R2			; apply the shift
	SOB	R3, L73DD
	POP	R2
	INC	R2
	ADD	#30., R2		; next row
	SOB	R1, L73DB		; continue loop by rows
	BR	L734A			; => B702 Proceed to the next room token
; Room token #08: Fill triangle from wide bottom; params: 4 bytes (filler, count, offset)
L73EB:	MOV	#-1, R4			; shift = -1
	BR	L73C7
; Room token #09: Fill triangle from wide top
L73EF:	MOV	#-1, R4			; shift = -1
	BR	L73A6
; Room token #04: Fill whole Tile screen 0 with one tile; params: 1 byte (filler)
L73F3:	POP	R3			; Restore token sequence address
	INC	R3			; Skip token byte
	MOVB	(R3), R0		; get tile byte
	PUSH	R3
	MOV	#L6590, R2		; Tile screen 0 start address
	MOV	#510., R1		; count
10$:	MOVB	R0, (R2)+
	SOB	R1, 10$
	BR	L734A			; => B702 Proceed to the next room token
; Room token #05: Copy block of tiles; params: 5 bytes (width, height, source, offset)
L7406:	POP	R3			; Restore token sequence address
	INC	R3			; Skip token byte
	MOVB	(R3)+, R4		; get width
	MOVB	(R3)+, R1		; get count/height
	MOVB	(R3)+, R0		; get source index
	ASL	R0
	MOV	TBLOCK(R0), R0		; Convert source index to source address
	CLR	R2
	BISB	(R3)+, R2		; get offset low byte
	SWAB	R2
	BISB	(R3), R2		; get offset high byte
	SWAB	R2
	ADD	#L6590, R2		; + Tile screen 0 address
	PUSH	R3
L7415:	PUSH	R4
L7416:	MOVB	(R0)+, (R2)+
	SOB	R4, L7416		; continue loop by columns
	POP	R4
	ADD	#30., R2		; next row
	SOB	R1, L7415
	BR	L734A			; => B702 Proceed to the next room token
; Room token #0C: Copy block of tiles N times; params: 5 bytes (source, width, count, offset)
L742B:	POP	R3			; Restore token sequence address
	INC	R3			; Skip token byte
	MOVB	(R3)+, R0		; get source index
	ASL	R0
	MOV	TBLOCK(R0), R0		; Convert source index to source address
	MOVB	(R3)+, R4		; get width
	MOVB	(R3)+, R1		; get count/height
	CLR	R2
	BISB	(R3)+, R2		; get offset low byte
	SWAB	R2
	BISB	(R3), R2		; get offset high byte
	SWAB	R2
	ADD	#L6590, R2		; + Tile screen 0 address
	PUSH	R3
L743A:	PUSH	R4
	PUSH	R2
L743D:	MOVB	(R0)+, (R2)+
	SOB	R4, L743D
	POP	R2
	POP	R4
	SOB	R1, L743A
	BR	L734A			; => B702 Proceed to the next room token
; Room token #03: Fill rectangle; params: 5 bytes (filler, width, height, offset)
L7452:	POP	R3			; Restore token sequence address
	INC	R3			; Skip token byte
	MOVB	(R3)+, R0		; get tile byte
	MOVB	(R3)+, R4		; get width
	MOVB	(R3)+, R1		; get count/height
	CLR	R2
	BISB	(R3)+, R2		; get offset low byte
	SWAB	R2
	BISB	(R3), R2		; get offset high byte
	SWAB	R2
	ADD	#L6590, R2		; + Tile screen 0 address
	PUSH	R3
L7463:	PUSH	R2
	PUSH	R4
L7465:	MOVB	R0, (R2)+
	SOB	R4, L7465
	POP	R4
	POP	R2
	ADD	#30., R2
	SOB	R1, L7463
	JMP	LB702			; => Proceed to the next room token

L749C:	.BYTE	19.			; Energy $04..$13
L749D:	.BYTE	1			; Energy lower, running bit

; Decreasing Energy
L749E:
	RETURN ;STUB

L7918:	; Room procedure (for 19 rooms with a guard)
	JMP	LB44C
L791B:	; Rooms 7C9C/92EF initialization
	JMP	LB425

L9C40:	.BYTE	8.			; Ninja Y within the room, 0 at the top
L9C41:	.BYTE	6			; Ninja X within the room
L9C42:	.WORD	246.			; Ninja position in tilemap: Y * 30. + X

; Process a dog
L9C44:
	RETURN	;STUB

; Initialize a dog
; Input: R3 = dog data address
L9DCD:
	;TODO
	RETURN ;STUB

; Decrease Energy by B
L9DD9:	RETURN				; !!MUT-CMD!! "PUSH R1" or "RETURN"
	CALL	L749E			; Decrease Energy
	POP	R1
	;TODO
	SOB	R1, L9DD9
	RETURN

; Sprite Ninja/Guard dead, 6x7 tiles
LA0B5:	;TODO

LA0DF:	; Room 94AB initialization
	MOV	LA1E1, R3		; Guard data address
; Initialize a guard, then Standard room initialization
LA0E2:	CALL	LB40A			; Initialize a guard
LA0E5:	JMP	LB422			; Standard room initialization
LA0E8:	; Room 7DA9 initialization
	MOV	LA1E7, R3		; Guard data address
	BR	LA0E2			; Initialize a guard, then Standard room initialization
LA0ED:	; Room 7E8C initialization
	MOV	LA1ED, R3		; Guard data address
	BR	LA0E2			; Initialize a guard, then Standard room initialization
LA0F2:	; Room 920A initialization
	MOV	LA1F3, R3		; Guard data address
	BR	LA0E2			; Initialize a guard, then Standard room initialization
LA0F7:	; Room 8F84 initialization
	MOV	LA1F9, R3		; Guard data address
	BR	LA0E2			; Initialize a guard, then Standard room initialization
LA0FC:	; Room 8B71 initialization
	MOV	LA1FF, R3		; Guard data address
	BR	LA0E2			; Initialize a guard, then Standard room initialization
LA101:	; Room 8739 initialization
	MOV	LA205, R3		; Guard data address
	BR	LA0E2			; Initialize a guard, then Standard room initialization
LA106:	; Room 858F initialization
	MOV	LA20B, R3		; Guard data address
	BR	LA0E2			; Initialize a guard, then Standard room initialization
LA10B:	; Room 84EE initialization
	MOV	LA211, R3		; Guard data address
	BR	LA0E2			; Initialize a guard, then Standard room initialization
LA110:	; Room 99A6 initialization
	MOV	LA21D, R3		; Guard data address
	BR	LA0E2			; Initialize a guard, then Standard room initialization
LA115:	; Room 97F8 initialization
	MOV	LA223, R3		; Guard data address
	BR	LA0E2			; Initialize a guard, then Standard room initialization
LA11A:	; Room 94CF initialization
	MOV	LA229, R3		; Guard data address
	BR	LA0E2			; Initialize a guard, then Standard room initialization
LA11F:	; Room 9B51 initialization
	MOV	LA22F, R3		; Guard data address
	BR	LA0E2			; Initialize a guard, then Standard room initialization
LA124:	; Room 9F3A initialization
	MOV	LA235, R3		; Guard data address
	BR	LA0E2			; Initialize a guard, then Standard room initialization
LA129:	; Room 9F7E initialization
	MOV	LA23B, R3		; Guard data address
	BR	LA0E2			; Initialize a guard, then Standard room initialization
LA12E:	; Room 9EB8 initialization
	MOV	LA241, R3		; Guard data address
	BR	LA0E2			; Initialize a guard, then Standard room initialization
LA133:	; Room 9B19 initialization
	MOV	LA247, R3		; Guard data address
	BR	LA0E2			; Initialize a guard, then Standard room initialization
LA138:	; Room 9DF5 initialization
	MOV	LA24D, R3		; Guard data address
	BR	LA0E2			; Initialize a guard, then Standard room initialization

LA142:	; Room 7A17 initialization
	MOV	LA33E, R3		; Turret data address
; Initialize a turret, then Standard room initialization
LA145:	CALL	LB461			; Initialize a turret
	BR	LA0E5			; Standard room initialization
LA14A:	; Room 7D5A initialization
	MOV	LA32F, R3		; Turret data address
	BR	LA145			; Initialize a turret, then Standard room initialization
LA14F:	; Room 7F48 initialization
	MOV	LA332, R3		; Turret data address
	BR	LA145			; Initialize a turret, then Standard room initialization
LA154:	; Room 7EF2 initialization
	MOV	LA299, R3		; Dog data address
	CALL	L9DCD			; Initialize a dog
	MOV	LA338, R3		; Turret data address
	BR	LA145			; Initialize a turret, then Standard room initialization
LA15F:	; Room 909F initialization
	MOV	LA2E9, R3		; Dog data address
	CALL	L9DCD			; Initialize a dog
	MOV	LA338, R3		; Turret data address
	BR	LA145			; Initialize a turret, then Standard room initialization
LA16A:	; Room 8FBD initialization
	MOV	LA335, R3		; Turret data address
	BR	LA145			; Initialize a turret, then Standard room initialization
LA16F:	; Room 92A7 initialization
	MOV	LA338, R3		; Turret data address
	BR	LA145			; Initialize a turret, then Standard room initialization
LA174:	; Room 8B25 initialization
	MOV	LA33B, R3		; Turret data address
	BR	LA145			; Initialize a turret, then Standard room initialization
LA179:	; Room 8526 initialization
	MOV	LA33E, R3		; Turret data address
	BR	LA145			; Initialize a turret, then Standard room initialization

LA183:	; Room 95D6 initialization
	MOV	LA344, R3		; Turret data address
	BR	LA145			; Initialize a turret, then Standard room initialization
LA188:	; Room 968A initialization
	MOV	LA347, R3		; Turret data address
	BR	LA145			; Initialize a turret, then Standard room initialization
LA18D:	; Finish Room 97A6 initialization
	MOV	LA34A, R3		; Turret data address
	BR	LA145			; Initialize a turret, then Standard room initialization
LA192:	; Room 9A9A initialization
	MOV	LA332, R3		; Turret data address
	BR	LA145			; Initialize a turret, then Standard room initialization
LA197:	; Room 9552 initialization
	MOV	LA34D, R3		; Turret data address
	BR	LA145			; Initialize a turret, then Standard room initialization
LA19C:	; Room 9BE7 initialization
	MOV	LA350, R3		; Turret data address
	BR	LA145			; Initialize a turret, then Standard room initialization
LA1A1:	; Room 8D5C initialization
	MOV	LA33B, R3		; Turret data address
	BR	LA145			; Initialize a turret, then Standard room initialization
LA1A6:	; Room 7C2E initialization
	MOV	LA271, R3		; Dog data address
	CALL	L9DCD			; Initialize a dog
	MOV	LA253, R3		; Guard data address
LA1AF:	; Finish room initialization
	CALL	LB40A			; Initialize a guard
	JMP	LB422			; Standard room initialization
LA1B5:	; Room 7F9C initialization
	MOV	LA27B, R3		; Dog data address
	CALL	L9DCD			; Initialize a dog
	MOV	LA259, R3		; Guard data address
	BR	LA1AF			; Initialize a guard, then Standard room initialization
LA1C0:	; Room 8162 initialization
	MOV	LA28F, R3		; Dog data address
	CALL	L9DCD			; Initialize a dog
	MOV	LA265, R3		; Guard data address
	BR	LA1AF			; Initialize a guard, then Standard room initialization
LA1CB:	; Room 80A7 initialization
	MOV	LA2AD, R3		; Dog data address
	CALL	L9DCD			; Initialize a dog
	MOV	LA265, R3		; Guard data address
	BR	LA1AF			; Initialize a guard, then Standard room initialization
LA1D6:	; Room 9B9D initialization
	MOV	LA325, R3		; Dog data address
	CALL	L9DCD			; Initialize a dog
	MOV	LA26B, R3		; Guard data address
	BR	LA1AF			; Initialize a guard, then Standard room initialization

; Guards data, 24 records, 6 bytes each
LA1E1:	.BYTE	235,000,007,005,012,001	; Room 94AB guard
LA1E7:	.BYTE	030,001,012,011,012,000	; Room 7DA9 guard
LA1ED:	.BYTE	024,001,006,011,012,000	; Room 7E8C guard
LA1F3:	.BYTE	023,001,005,011,012,000	; Room 920A guard
LA1F9:	.BYTE	310,000,024,006,012,000	; Room 8F84 guard
LA1FF:	.BYTE	040,001,022,011,012,001	; Room 8B71 guard
LA205:	.BYTE	120,000,024,002,012,001	; Room 8739 guard
LA20B:	.BYTE	036,001,020,011,012,000	; Room 858F guard
LA211:	.BYTE	001,001,021,010,012,001	; Room 84EE guard
;LA217:	.BYTE	030,001,012,011,012,000	; UNUSED, see A13D
LA21D:	.BYTE	042,001,024,011,012,001	; Room 99A6 guard
LA223:	.BYTE	371,000,011,010,012,000	; Room 97F8 guard
LA229:	.BYTE	002,001,022,010,012,001	; Room 94CF guard
LA22F:	.BYTE	337,000,015,007,012,001	; Room 9B51 guard
LA235:	.BYTE	367,000,007,010,012,001	; Room 9F3A guard
LA23B:	.BYTE	370,000,010,010,012,000	; Room 9F7E guard
LA241:	.BYTE	206,000,016,004,012,001	; Room 9EB8 guard
LA247:	.BYTE	242,000,014,005,012,000	; Room 9B19 guard
LA24D:	.BYTE	273,000,007,006,012,000	; Room 9DF5 guard
LA253:	.BYTE	302,000,016,006,012,000	; Room 7C2E guard
LA259:	.BYTE	324,000,002,007,012,000	; Room 7F9C guard
LA25F:	.BYTE	013,000,013,000,012,001	; Room 8162 guard
LA265:	.BYTE	040,001,022,011,012,001	; Room 80A7 guard
LA26B:	.BYTE	060,000,022,001,012,001	; Room 9B9D guard

; Dogs data, 19 records, 10 bytes each
LA271:	.BYTE	074,001,000,020,000,003,026,000,003,001	; Room 7C2E dog
LA27B:	.BYTE	136,001,001,024,000,003,026,001,004,001	; Room 7F9C dog
LA285:	.BYTE	245,000,000,017,000,005,017,000,376,001	; Room 81E5 dog
LA28F:	.BYTE	172,000,001,002,000,000,030,001,375,001	; Room 8162 dog
LA299:	.BYTE	217,001,001,011,000,003,030,001,006,001	; Room 7EF2 dog
LA2A3:	.BYTE	212,001,001,004,000,002,032,001,006,001	; Room 7E05 dog
LA2AD:	.BYTE	232,001,000,024,001,003,025,001,006,001	; Room 80A7 dog
LA2B7:	.BYTE	222,001,000,014,000,005,031,000,006,001	; Room 83ED dog
LA2C1:	.BYTE	214,001,001,006,001,001,027,000,006,001	; Room 80F6 dog
LA2CB:	.BYTE	220,001,000,012,000,004,027,000,006,001	; Room 924E dog
LA2D5:	.BYTE	033,001,001,015,000,006,030,001,002,001	; Room 91BA dog
LA2DF:	.BYTE	166,001,001,016,000,000,017,001,005,001	; Room 90DB dog
LA2E9:	.BYTE	227,001,001,021,000,015,032,001,006,001	; Room 909F dog
LA2F3:	.BYTE	274,000,000,010,000,001,016,000,377,001	; Room 8802 dog
LA2FD:	.BYTE	244,000,000,016,000,002,016,000,376,001	; Room 8608 dog
LA307:	.BYTE	216,001,000,010,000,007,027,000,006,001	; Room 844E dog
LA311:	.BYTE	215,001,001,007,000,003,025,001,006,001	; Room 9739 dog
LA31B:	.BYTE	366,000,000,006,000,002,017,000,001,001	; Room 9A5A dog
LA325:	.BYTE	214,001,001,006,000,004,030,001,006,001	; Room 9B9D dog

; Turrets data, 12 records, 3 bytes each
LA32F:	.BYTE	304,000,016	; Room 7A17 turret
LA332:	.BYTE	047,000,007	; Room 7F48/9A9A turret
LA335:	.BYTE	021,000,017	; Room 8FBD turret
LA338:	.BYTE	053,000,012	; Room 7EF2/909F/92A7 turret
LA33B:	.BYTE	113,000,015	; Room 8B25/8D5C turret
LA33E:	.BYTE	057,000,017	; Room 7A17/8526 turret
LA341:	.BYTE	062,000,022	; UNUSED, see A17E
LA344:	.BYTE	235,000,005	; Room 95D6 turret
LA347:	.BYTE	246,000,016	; Room 968A turret
LA34A:	.BYTE	012,001,030	; Room 968A turret
LA34D:	.BYTE	077,000,001	; Room 9552 turret
LA350:	.BYTE	243,000,013	; Room 9BE7 turret

LA353:	; Room 81E5 initialization
	MOV	LA285, R3		; Dog data address
; Initialize a dog, then Standard room initialization
LA356:	CALL	L9DCD			; Initialize a dog
	JMP	LB422			; Standard room initialization
LA35C:	; Room 7E05 initialization
	MOV	LA2A3, R3		; Dog data address
	BR	LA356			; Initialize a dog, then Standard room initialization
LA361:	; Room 83ED initialization
	MOV	LA2B7, R3		; Dog data address
	BR	LA356			; Initialize a dog, then Standard room initialization
LA366:	; Room 924E initialization
	MOV	LA2CB, R3		; Dog data address
	BR	LA356			; Initialize a dog, then Standard room initialization
LA36B:	; Room 91BA initialization
	MOV	LA2D5, R3		; Dog data address
	BR	LA356			; Initialize a dog, then Standard room initialization
LA370:	; Room 90DB initialization
	MOV	LA2DF, R3		; Dog data address
	BR	LA356			; Initialize a dog, then Standard room initialization
LA375:	; Room 8802 initialization
	MOV	LA2F3, R3		; Dog data address
	BR	LA356			; Initialize a dog, then Standard room initialization
LA37A:	; Room 8608 initialization
	MOV	LA2FD, R3		; Dog data address
	BR	LA356			; Initialize a dog, then Standard room initialization
LA37F:	; Room 844E initialization
	MOV	LA307, R3		; Dog data address
	BR	LA356			; Initialize a dog, then Standard room initialization
LA384:	; Room 9739 initialization
	MOV	LA311, R3		; Dog data address
	BR	LA356			; Initialize a dog, then Standard room initialization
LA389:	; Room 9A5A initialization
	MOV	LA31B, R3		; Dog data address
	BR	LA356			; Initialize a dog, then Standard room initialization
LA38E:	; Room 80F6 initialization
	MOV	LA2C1, R3		; Dog data address
	BR	LA356			; Initialize a dog, then Standard room initialization

; Reset Guard data and Dog data
LAC44:
	RETURN	;STUB

; Draw game screen frames and indicator text
LACCA:
	MOV	#<SCREEN+4>, @#176640	; Screen start address
	MOV	#LAD65, R2		; Game screen frames/indicators RLE encoded sequence
	CLR	R5			; счётчик до 32.
10$:	CLR	R0
	BISB	(R2)+, R0
	CMPB	R0, #377
	BEQ	LAD1D
	PUSH	R2
	MOV	#1, R1
	CMPB	R0, #23.
	BLO	20$
	SUB	#20., R0
	MOV	R0, R1
	POP	R2
	CLR	R0
	BISB	(R2)+, R0
	PUSH	R2
20$:	MOV	R0, R2
	ASL	R0
	ASL	R0
	ASL	R0			; * 8.
	ADD	R0, R2			; * 9.
	ADD	#LAE02, R2		; Indicator tiles address
27$:	MOV	#8., R4
30$:	CLR	R0
	BISB	(R2)+, R0
	MOV	R0, @#176642		; Пишем данные в ВОЗУ УКНЦ
	ADD	#120, @#176640		; next line
	SOB	R4, 30$
	SUB	#<1200-1>, @#176640	; next column
	INC	R5
	BIC	#177740, R5		; keep 5 lower bits = 0..31.
	BNE	40$
	ADD	#<1200-40>, @#176640	; next row
40$:	SUB	#8., R2
	SOB	R1, 27$
	POP	R2
	BR	10$
LAD1D:
	MOV	#<SCREEN+4+<1200*19.>+7.>, R2
	MOV	#13., R1
	MOV	#LAD4A, R3
	CALL	LAED1			; Print string "PAY : $ 00000"
	MOV	#<SCREEN+4+<1200*20.>+23.>, R2
	MOV	#2, R1
	CALL	LAED1			; Print string "99"
	MOV	#<SCREEN+4+<1200*22.>+1.>, R2
	MOV	#4, R1
	CALL	LAED1			; Print string "HELD"
	MOV	#<SCREEN+4+<1200*22.>+22.>, R2
	MOV	#4, R1
	CALL	LAED1			; Print string "TIME"
	MOV	#<SCREEN+4+<1200*22.>+27.>, R2
	MOV	#4, R1
	CALL	LAED1			; Print string "NEAR"
	RETURN

; Indicator messages
LAD4A:	.ASCII	/PAY : $ /
LAD52:	.ASCII	/00000/			; Pay value text
LAD57:	.ASCII	/99/			; Indicator time value
LAD59:	.ASCII	/HELDTIMENEAR/

.INCLUDE /S1INDS.MAC/
	.EVEN

; Print string on the screen
; Input: R1 = length, R2 = screen address, R3 = string address
LAED1:
1$:	CLR	R0
	BISB	(R3)+, R0		; get symbol byte
	ASL	R0
	ASL	R0
	ASL	R0			; * 8
	ADD	#<LC721-400>, R0	; + font base address
	MOV	#8., R4
10$:	CLR	R5
	BISB	(R0), R5
	SWAB	R5
	BISB	(R0)+, R5
	MOV	R2, @#176640		; Пишем адрес в ВОЗУ УКНЦ
	MOV	R5, @#176642		; Пишем данные в ВОЗУ УКНЦ
	ADD	#120, R2		; к следующей строке экрана
	SOB	R4, 10$
	SUB	#<1200-1>, R2		; на 8. строк выше, плюс колонка вправо
	SOB	R1, 1$
	RETURN

; Room 97A6 initialization
LB368:
	;TODO

; Play melody ??; HL = melody address
LB371:
	RETURN	;STUB

; Room token #00: Barrel, 3x3 tiles 7C21; params: 2 bytes (address)
LB38F:
	;TODO
	RETURN ;STUB

; Initialize a guard
; Input: R3 = Guard data address, see A1E1
LB40A:
	;TODO
	RETURN ;STUB
; Standard room procedure (for 63 rooms)
LB41F:
	JMP	LB937
; Standard room initialization (for 60 rooms)
LB422:
	JMP	LB724			; => Finish room initialization
; Rooms 7C9C/92EF initialization (redirect from 791B)
LB425:
	MOV	#LC66B, R3		; Guard data address
	CALL	LB40A			; Initialize a guard
	JMP	LB724			; => Finish room initialization
; Room 79C6 initialization
LB42E:
	MOV	#L71D6, R3		; Dog data address
	CALL	L9DCD			; Initialize a dog
	JMP	LB724			; => Finish room initialization

LB446:	; Room B513 procedure (initial Room)
	;TODO
LB44C:	; Room procedure (for 19 rooms with a guard) (redirect from 7918)
	;TODO
LB452:	; Room procedure (for 18 rooms with a dog)
	;TODO
LB458:	; Room procedure (for 5 rooms with a guard and a dog)
	;TODO
; Turret initialization
LB461:
	RETURN ;STUB
LB47A:	; Room procedure (for 2 rooms with a turret and a dog)
	;TODO
LB483:
	;TODO

LB5C4:	.BYTE	25	; Time fast counter 50..0
LB5C5:	.BYTE	1	; Ninja standing counter
LB5C6:	.BYTE	0	; Time mode: 0 = time ticking; 1 = Time stopped; 2 = BOMB ticking mode
	.EVEN

LB5C7:
	CALL	LAC44
	;TODO

; Current Room changed, entering the new Room
LB66A:
	;TODO

LB6EE:	CLR	R0
	BISB	(R3), R0		; get next token
	CMPB	R0, #377		; End of sequence?
	BNE	LB6F4			; no =>
LB6F1:	JMP	@#LB724			; !!MUT-ARG!! => run Room initialization code
LB6F4:	PUSH	R3			; Save address in the room sequence
	ASL	R0			; * 2
	ADD	#<LB706>, R0		; Table of Room tokens
	MOV	(R0), R0		; get token procedure address
	JMP	@R0			; => run token procedure
;
; Proceed to the next room token
LB702:
	POP	R3			; Restore address in the room sequence
	INC	R3			; to next token
	BR	LB6EE			; => continue room sequence processing

; Table of Room tokens
LB706:	.WORD	LB38F	; #00: Put 3x3 tiles $7C21; params: 2 bytes (address)
LB708:	.WORD	L7381	; #01: Fill to down; params: 4 bytes (count, filler, address)
LB70A:	.WORD	L739F	; #02: Fill to right; params: 4 bytes (count, filler, address)
LB70C:	.WORD	L7452	; #03: Fill rectangle; params: 5 bytes (filler, width, height, address)
LB70E:	.WORD	L73F3	; #04: Fill whole Tile screen 0 with one tile; params: 1 byte (filler)
LB710:	.WORD	L7406	; #05: Copy block of tiles; params: 5 bytes (width, height, source, address)
LB712:	.WORD	L73A4	; #06: Fill triangle from wide top; params: 4 bytes (filler, count, address)
LB714:	.WORD	L73C5	; #07: Fill triangle from wide bottom; params: 4 bytes (filler, count, address)
LB716:	.WORD	L73EB	; #08: Fill triangle from wide bottom; params: 4 bytes (filler, count, address)
LB718:	.WORD	L73EF	; #09: Fill triangle from wide top; params: 4 bytes (filler, count, address)
LB71A:	.WORD	L7395	; #0A: Fill to down-right; params: 4 bytes (count, filler, address)
LB71C:	.WORD	L739A	; #0B: Fill to down-left; params: 4 bytes (count, filler, address)
LB71E:	.WORD	L742B	; #0C: Copy block of tiles N times; params: 5 bytes (source, width, count, address)
LB720:	.WORD	L7359	; #0D: Set border color; params: 1 byte
LB722:	.WORD	L734D	; #0E: Put one tile at the given address; params: 3 bytes (tile, address)

; Finish room initialization
LB724:
	;TODO

; Game loop start
LB77B:
	;TODO

LC64C:
	;TODO

LC66B:	; Guard data for rooms 7C9C/92EF
	;TODO

; Room 93DF/947C (room right from Train) initialization
LC671:
	;TODO
; Room 982B initialization
LC681:
	;TODO
; Room 7C9C procedure (tunnel Train)
LC6A5:
	;TODO

; Movement handler (B8CE handler): Train moving left
LC6E2:
	;TODO

; Movement handler (B8CE handler): Train moving right
LC70C:
	;TODO

LDF27:	.ASCII	/S  START MISSION/

LB937:

LF973:
	;TODO

;------------------------------------------------------------------------------

; Tile screen 0 30x17 tiles, 510 bytes - background
L6590:	.BLKW	510.
; Tile screen 1 30x17 tiles, 510 bytes - update flags
L678E:	.BLKW	510.
; Tile screen 2 30x17 tiles, 510 bytes - Ninja screen
L698C:	.BLKW	510.
; Tile screen 3 30x17 tiles, 510 bytes - Dog screen
L6B8A:	.BLKW	510.
; Tile screen 4 30x17 tiles, 510 bytes - Guard screen
L6D88:	.BLKW	510.
; Tile screen 5 30x17 tiles, 510 bytes - front
L6F86:	.BLKW	510.

;------------------------------------------------------------------------------
	.END	STCORE
